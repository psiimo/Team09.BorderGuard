// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package itcollege.team09.entities;

import itcollege.team09.entities.Piirivalve;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Piirivalve_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager Piirivalve.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer Piirivalve.version;
    
    public Integer Piirivalve.getVersion() {
        return this.version;
    }
    
    public void Piirivalve.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Piirivalve.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Piirivalve.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Piirivalve.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    public static final EntityManager Piirivalve.entityManager() {
        EntityManager em = new Piirivalve() {
        }.entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Piirivalve.countPiirivalves() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Piirivalve o", Long.class).getSingleResult();
    }
    
    public static List<Piirivalve> Piirivalve.findAllPiirivalves() {
        return entityManager().createQuery("SELECT o FROM Piirivalve o", Piirivalve.class).getResultList();
    }
    
    public static Piirivalve Piirivalve.findPiirivalve(Long id) {
        if (id == null) return null;
        return entityManager().find(Piirivalve.class, id);
    }
    
    public static List<Piirivalve> Piirivalve.findPiirivalveEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Piirivalve o", Piirivalve.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
